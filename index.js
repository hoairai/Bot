import { ethers } from 'ethers';   // Thay th·∫ø require('ethers')
import fs from 'fs';                // Thay th·∫ø require('fs')
import readline from 'readline';    // Thay th·∫ø require('readline')
import chalk from 'chalk';  // S·ª≠ d·ª•ng import thay v√¨ require

const networks = {
    teaSepolia: {
        name: 'Tea Sepolia',
        chainId: 10218,
        rpc: 'https://tea-sepolia.g.alchemy.com/public',
        symbol: 'TEA',
        explorer: 'https://sepolia.tea.xyz',
        decimals: 18
    }
};

const WALLET_FILE_1 = 'wallets1.txt';
const WALLET_FILE_2 = 'wallets2.txt';
const PK1_FILE = 'pk1.txt'; // File ch·ª©a kh√≥a ri√™ng v√≠ ch√≠nh 1
const PK2_FILE = 'pk2.txt'; // File ch·ª©a kh√≥a ri√™ng v√≠ ch√≠nh 2

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

const askQuestion = (query) => new Promise(resolve => rl.question(chalk.cyan(query), resolve));  // Th√™m m√†u cho c√¢u h·ªèi

function randomDelay(min, max) {
    const delay = (Math.floor(Math.random() * (max - min + 1)) + min) * 1000;
    return new Promise(resolve => setTimeout(resolve, delay));
}

function saveWalletToFile(address, privateKey, group) {
    const walletData = `${address}:${privateKey}:${group}\n`;
    if (group === 'wallets1') {
        fs.appendFileSync(WALLET_FILE_1, walletData); // L∆∞u v√†o wallets1.txt
    } else if (group === 'wallets2') {
        fs.appendFileSync(WALLET_FILE_2, walletData); // L∆∞u v√†o wallets2.txt
    }
}

function generateNewWallet() {
    const wallet = ethers.Wallet.createRandom();
    return {
        address: wallet.address,
        privateKey: wallet.privateKey
    };
}

async function handleCreateWallets() {
    try {
        const numWallets = parseInt(await askQuestion(chalk.yellow('B·∫°n mu·ªën t·∫°o bao nhi√™u v√≠? üßë‚Äçüíª ')));
        
        if (isNaN(numWallets) || numWallets <= 0) {
            console.error(chalk.red('‚ùå S·ªë l∆∞·ª£ng v√≠ ph·∫£i l√† m·ªôt s·ªë d∆∞∆°ng!'));
            return;
        }

        const numWalletsPerGroup = Math.floor(numWallets / 2);
        console.log(chalk.green(`‚úÖ T·∫°o ${numWalletsPerGroup} v√≠ cho wallets1 v√† ${numWalletsPerGroup} v√≠ cho wallets2`));

        console.log(chalk.blue('\nüî® B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫°o v√≠...'));
        console.log(chalk.green(`üíæ C√°c v√≠ s·∫Ω ƒë∆∞·ª£c l∆∞u v√†o: wallets1.txt v√† wallets2.txt\n`));

        // X√≥a to√†n b·ªô n·ªôi dung c·ªßa c√°c file wallets1.txt v√† wallets2.txt tr∆∞·ªõc khi t·∫°o v√≠ m·ªõi
        fs.writeFileSync(WALLET_FILE_1, ''); 
        fs.writeFileSync(WALLET_FILE_2, ''); 

        // Th√¥ng b√°o x√≥a th√†nh c√¥ng
        console.log(chalk.green('‚úÖ ƒê√£ x√≥a n·ªôi dung c·ªßa wallets1.txt v√† wallets2.txt th√†nh c√¥ng!'));

        for (let i = 0; i < numWalletsPerGroup; i++) {
            const wallet = generateNewWallet();
            console.log(chalk.cyan(`üí≥ V√≠ ${i + 1}/${numWalletsPerGroup} (wallets1):`));
            console.log(chalk.green(`üóù ƒê·ªãa ch·ªâ: ${wallet.address}`));
            
            saveWalletToFile(wallet.address, wallet.privateKey, 'wallets1');  // L∆∞u v√†o wallets1.txt
            await randomDelay(1, 3);
        }

        for (let i = 0; i < numWalletsPerGroup; i++) {
            const wallet = generateNewWallet();
            console.log(chalk.cyan(`üí≥ V√≠ ${i + 1}/${numWalletsPerGroup} (wallets2):`));
            console.log(chalk.green(`üóù ƒê·ªãa ch·ªâ: ${wallet.address}`));
            
            saveWalletToFile(wallet.address, wallet.privateKey, 'wallets2');  // L∆∞u v√†o wallets2.txt
            await randomDelay(1, 3);
        }

        console.log(chalk.green('\n‚úÖ Qu√° tr√¨nh t·∫°o v√≠ ho√†n t·∫•t!'));
    } catch (error) {
        console.error(chalk.red('‚ùå L·ªói:'), error.message);
    }
}

// ƒê·ªãnh nghƒ©a h√†m sendToken
async function sendToken(privateKey, walletsFile, amountPerTx, provider, useRandom, minAmount, maxAmount) {
    const wallet = new ethers.Wallet(privateKey, provider);
    const walletsData = fs.readFileSync(walletsFile, 'utf-8').split('\n').filter(line => line);
    let walletCount = 1;

    for (const walletData of walletsData) {
        const [address] = walletData.split(':');
        let amount;
        
        // N·∫øu s·ª≠ d·ª•ng s·ªë l∆∞·ª£ng ng·∫´u nhi√™n, t√≠nh to√°n s·ªë l∆∞·ª£ng token
        if (useRandom) {
            amount = (Math.random() * (maxAmount - minAmount) + minAmount).toFixed(6);
        } else {
            amount = amountPerTx;
        }

        // Chuy·ªÉn s·ªë l∆∞·ª£ng token th√†nh ƒë∆°n v·ªã nh·ªè nh·∫•t (wei)
        const tokenAmount = ethers.parseUnits(amount.toString(), 18); // Assuming the token has 18 decimals

        const tx = {
            to: address,
            value: tokenAmount
        };

        console.log(chalk.blue(`üí∞ G·ª≠i ${amount} token ƒë·∫øn ${address} - V√≠ th·ª©: ${walletCount}`));

        try {
            const transaction = await wallet.sendTransaction(tx);
            console.log(chalk.green(`‚úÖ Giao d·ªãch ƒë√£ ƒë∆∞·ª£c g·ª≠i: ${transaction.hash}`));
            console.log(chalk.yellow(`üåê Xem tr√™n explorer: ${networks.teaSepolia.explorer}/tx/${transaction.hash}`));
            await transaction.wait();
        } catch (error) {
            console.error(chalk.red(`‚ùå L·ªói khi g·ª≠i ƒë·∫øn ${address}: ${error.message}`));
        }
        walletCount++;
    }
}

async function handleSendToken() {
    try {
        const useRandom = await askQuestion(chalk.yellow('B·∫°n c√≥ mu·ªën s·ª≠ d·ª•ng s·ªë l∆∞·ª£ng ng·∫´u nhi√™n cho m·ªói giao d·ªãch kh√¥ng? (c√≥/kh√¥ng): üé≤ '));

        let amountPerTx, minAmount, maxAmount;
        
        if (useRandom.toLowerCase() === 'c√≥' || useRandom.toLowerCase() === 'c') {
            minAmount = await askQuestion(chalk.yellow('Nh·∫≠p s·ªë l∆∞·ª£ng token t·ªëi thi·ªÉu cho m·ªói giao d·ªãch: üìâ '));
            maxAmount = await askQuestion(chalk.yellow('Nh·∫≠p s·ªë l∆∞·ª£ng token t·ªëi ƒëa cho m·ªói giao d·ªãch: üìà '));

            if (isNaN(minAmount) || isNaN(maxAmount) || parseFloat(minAmount) >= parseFloat(maxAmount)) {
                console.error(chalk.red('‚ùå S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá! Gi√° tr·ªã t·ªëi thi·ªÉu ph·∫£i l√† s·ªë v√† nh·ªè h∆°n gi√° tr·ªã t·ªëi ƒëa.'));
                return;
            }
        } else {
            amountPerTx = await askQuestion(chalk.yellow('Nh·∫≠p s·ªë l∆∞·ª£ng token cho m·ªói giao d·ªãch: üí∏ '));
            if (isNaN(amountPerTx)) {
                console.error(chalk.red('‚ùå S·ªë l∆∞·ª£ng ph·∫£i l√† m·ªôt s·ªë!'));
                return;
            }
        }

        const numberOfTx = await askQuestion(chalk.yellow('Nh·∫≠p s·ªë l∆∞·ª£ng giao d·ªãch c·∫ßn th·ª±c hi·ªán: üî¢ '));
        const minDelay = await askQuestion(chalk.yellow('Nh·∫≠p th·ªùi gian ch·ªù t·ªëi thi·ªÉu (gi√¢y) gi·ªØa c√°c giao d·ªãch: ‚è≥ '));
        const maxDelay = await askQuestion(chalk.yellow('Nh·∫≠p th·ªùi gian ch·ªù t·ªëi ƒëa (gi√¢y) gi·ªØa c√°c giao d·ªãch: ‚è≥ '));

        const pk1 = fs.readFileSync(PK1_FILE, 'utf-8').trim();
        const pk2 = fs.readFileSync(PK2_FILE, 'utf-8').trim();

        if (!pk1 || !pk2) {
            console.error(chalk.red('‚ùå Kh√¥ng t√¨m th·∫•y kh√≥a ri√™ng trong c√°c file pk1.txt ho·∫∑c pk2.txt'));
            return;
        }

        console.log(chalk.green('‚úÖ ƒêang th·ª±c hi·ªán g·ª≠i token...'));

        const provider = new ethers.JsonRpcProvider(networks.teaSepolia.rpc);

        console.log(chalk.blue('\nüîÅ G·ª≠i t·ª´ v√≠ ch√≠nh 1 (pk1.txt) ƒë·∫øn wallets1.txt...'));
        for (let i = 0; i < numberOfTx; i++) {
            await sendToken(pk1, WALLET_FILE_1, amountPerTx, provider, useRandom.toLowerCase() === 'c√≥' || useRandom.toLowerCase() === 'c', parseFloat(minAmount), parseFloat(maxAmount));
            await randomDelay(parseInt(minDelay), parseInt(maxDelay));
        }

        console.log(chalk.blue('\nüîÅ G·ª≠i t·ª´ v√≠ ch√≠nh 2 (pk2.txt) ƒë·∫øn wallets2.txt...'));
        for (let i = 0; i < numberOfTx; i++) {
            await sendToken(pk2, WALLET_FILE_2, amountPerTx, provider, useRandom.toLowerCase() === 'c√≥' || useRandom.toLowerCase() === 'c', parseFloat(minAmount), parseFloat(maxAmount));
            await randomDelay(parseInt(minDelay), parseInt(maxDelay));
        }

        console.log(chalk.green('\n‚úÖ Qu√° tr√¨nh g·ª≠i token ho√†n t·∫•t!'));
    } catch (error) {
        console.error(chalk.red('‚ùå L·ªói:'), error.message);
    }
}

async function showMenu() {
    while (true) {
        console.log(chalk.yellow('\n=== BOT C·ªßa ƒê·ªõ Th·ªß ==='));
        console.log(chalk.cyan('1. T·∫°o v√≠ m·ªõi üÜï'));
        console.log(chalk.cyan('2. G·ª≠i token t·ª´ v√≠ ch√≠nh ƒë·∫øn v√≠ ph·ª• üí∏'));
        console.log(chalk.cyan('3. Tho√°t ‚ùå'));
        
        const choice = await askQuestion(chalk.cyan('\nCh·ªçn menu (1-3): üßë‚Äçüíª '));

        switch (choice) {
            case '1':
                await handleCreateWallets();
                break;
            case '2':
                await handleSendToken();
                break;
            case '3':
                console.log(chalk.green('‚úÖ C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng bot n√†y!'));
                rl.close();
                process.exit(0);
            default:
                console.log(chalk.red('‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!'));
        }
    }
}

console.log(chalk.green('üöÄ ƒêang kh·ªüi ƒë·ªông Bot ƒêa M·∫°ng...'));
showMenu().catch(console.error);
